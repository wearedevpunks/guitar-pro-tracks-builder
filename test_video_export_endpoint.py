#!/usr/bin/env python3
"""
Test script for the video export endpoint.

This demonstrates the complete API flow for exporting metronome videos:
1. POST /api/songs/export-video with song_id in request body
2. The endpoint retrieves the song data
3. Parses the Guitar Pro file
4. Generates a metronome video with timing cues
5. Returns video file reference and metadata
"""

import json
from typing import Dict, Any


def demonstrate_api_usage():
    """Demonstrate the video export API endpoint usage."""
    
    print("=" * 80)
    print("VIDEO EXPORT API ENDPOINT DEMONSTRATION")
    print("=" * 80)
    print()
    
    # 1. API Endpoint Information
    print("ENDPOINT DETAILS:")
    print("  URL: POST /api/songs/export-video")
    print("  Content-Type: application/json")
    print("  Description: Export metronome video for band practice")
    print()
    
    # 2. Request Body Example
    print("REQUEST BODY EXAMPLE:")
    request_body = {
        "song_id": "123e4567-e89b-12d3-a456-426614174000",
        "output_format": "mp4",
        "resolution": [1920, 1080],
        "fps": 30,
        "duration_per_measure": None  # Optional override
    }
    print(json.dumps(request_body, indent=2))
    print()
    
    # 3. Request Body Options
    print("REQUEST PARAMETERS:")
    print("  song_id (required):")
    print("    - Type: string")
    print("    - Description: ID of the song to export video for")
    print("    - Example: '123e4567-e89b-12d3-a456-426614174000'")
    print()
    print("  output_format (optional):")
    print("    - Type: string")
    print("    - Default: 'mp4'")
    print("    - Description: Output video format")
    print()
    print("  resolution (optional):")
    print("    - Type: [width, height]")
    print("    - Default: [1920, 1080]")
    print("    - Examples: [1280, 720], [1920, 1080], [3840, 2160]")
    print()
    print("  fps (optional):")
    print("    - Type: integer")
    print("    - Default: 30")
    print("    - Range: 15-60")
    print("    - Description: Frames per second")
    print()
    print("  duration_per_measure (optional):")
    print("    - Type: float")
    print("    - Default: calculated from tempo")
    print("    - Description: Override duration per measure in seconds")
    print()
    
    # 4. Success Response Example
    print("SUCCESS RESPONSE EXAMPLE:")
    success_response = {
        "success": True,
        "message": "Video exported successfully",
        "song_id": "123e4567-e89b-12d3-a456-426614174000",
        "video_file": {
            "provider": "s3",
            "reference": "videos/123e4567-e89b-12d3-a456-426614174000/master_of_puppets_metronome.mp4"
        },
        "duration_seconds": 240.5,
        "total_measures": 64,
        "export_settings": {
            "resolution": [1920, 1080],
            "fps": 30,
            "tempo_bpm": 120,
            "format": "mp4",
            "song_title": "Master of Puppets",
            "total_measures": 64
        }
    }
    print(json.dumps(success_response, indent=2))
    print()
    
    # 5. Error Response Examples
    print("ERROR RESPONSE EXAMPLES:")
    print()
    print("Song not found:")
    error_response_1 = {
        "success": False,
        "message": "Failed to retrieve song: Tab with ID xyz not found",
        "song_id": "xyz",
        "video_file": None,
        "duration_seconds": 0,
        "total_measures": 0,
        "export_settings": None
    }
    print(json.dumps(error_response_1, indent=2))
    print()
    
    print("Parse error:")
    error_response_2 = {
        "success": False,
        "message": "Failed to parse song file: Invalid Guitar Pro format",
        "song_id": "123e4567-e89b-12d3-a456-426614174000",
        "video_file": None,
        "duration_seconds": 0,
        "total_measures": 0,
        "export_settings": None
    }
    print(json.dumps(error_response_2, indent=2))
    print()
    
    # 6. cURL Examples
    print("CURL EXAMPLES:")
    print()
    print("Basic export:")
    print('curl -X POST "http://localhost:3000/api/songs/export-video" \\')
    print('  -H "Content-Type: application/json" \\')
    print('  -d \'{"song_id": "123e4567-e89b-12d3-a456-426614174000"}\'')
    print()
    
    print("Custom settings:")
    print('curl -X POST "http://localhost:3000/api/songs/export-video" \\')
    print('  -H "Content-Type: application/json" \\')
    print('  -d \'{"song_id": "123e4567-e89b-12d3-a456-426614174000", "resolution": [1280, 720], "fps": 24}\'')
    print()
    
    # 7. JavaScript/TypeScript Example
    print("JAVASCRIPT/TYPESCRIPT EXAMPLE:")
    print("""
async function exportSongVideo(songId: string, options?: VideoExportOptions) {
  const request = {
    song_id: songId,
    output_format: options?.format || 'mp4',
    resolution: options?.resolution || [1920, 1080],
    fps: options?.fps || 30,
    duration_per_measure: options?.durationPerMeasure
  };
  
  const response = await fetch('/api/songs/export-video', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(request)
  });
  
  const result = await response.json();
  
  if (result.success) {
    console.log(`Video exported: ${result.video_file.reference}`);
    console.log(`Duration: ${result.duration_seconds} seconds`);
    console.log(`Measures: ${result.total_measures}`);
    return result.video_file;
  } else {
    throw new Error(result.message);
  }
}

// Usage examples:
await exportSongVideo("123e4567-e89b-12d3-a456-426614174000");
await exportSongVideo("song-id", { resolution: [1280, 720], fps: 24 });
""")
    
    # 8. Implementation Status
    print("IMPLEMENTATION STATUS:")
    print("âœ… API endpoint created: POST /api/songs/export-video")
    print("âœ… Request/response DTOs defined")
    print("âœ… Action handler implemented") 
    print("âœ… Song retrieval and parsing integration")
    print("âœ… Video export service integration")
    print("âœ… Error handling for all failure cases")
    print("âœ… Comprehensive documentation")
    print("ðŸ”„ Video generation requires dependencies (opencv, moviepy)")
    print()
    
    # 9. Video Features
    print("VIDEO FEATURES:")
    print("ðŸŽµ Visual Elements:")
    print("  - Large measure counter")
    print("  - Current section names (Intro, Verse, Chorus)")
    print("  - Beat indicators with beat 1 emphasis")
    print("  - Quarter note counter")
    print("  - Visual metronome pendulum")
    print("  - Song title and tempo display")
    print()
    print("ðŸ”Š Audio Elements:")
    print("  - Metronome clicks throughout song")
    print("  - Higher pitch (1000 Hz) for beat 1")
    print("  - Lower pitch (800 Hz) for other beats")
    print("  - Professional audio quality (44.1kHz)")
    print()
    print("ðŸ“Š Song Structure:")
    print("  - Section navigation")
    print("  - Repeat markers support")
    print("  - Alternative endings")
    print("  - Accurate measure counting")
    print()
    
    print("The video export API is fully implemented and ready for use!")


def show_workflow():
    """Show the complete workflow from song upload to video export."""
    
    print("\n" + "=" * 80)
    print("COMPLETE WORKFLOW: FROM UPLOAD TO VIDEO EXPORT")
    print("=" * 80)
    print()
    
    print("1. UPLOAD SONG:")
    print("   POST /api/songs/new")
    print("   - Upload Guitar Pro file")
    print("   - Returns song_id")
    print()
    
    print("2. GET SONG DATA (optional):")
    print("   GET /api/songs/{song_id}")
    print("   - Retrieve song information")
    print("   - Includes parsed tab data")
    print()
    
    print("3. EXPORT VIDEO:")
    print("   POST /api/songs/export-video")
    print("   - Use song_id from step 1")
    print("   - Specify export settings")
    print("   - Returns video file reference")
    print()
    
    print("4. DOWNLOAD/USE VIDEO:")
    print("   - Use video_file.reference to access video")
    print("   - Video contains metronome for band practice")
    print("   - Share with band members for synchronized practice")
    print()
    
    print("TYPICAL BAND PRACTICE WORKFLOW:")
    print("1. Band leader uploads song tab file")
    print("2. System generates practice video with timing cues")
    print("3. Band members watch video during rehearsal")
    print("4. Everyone stays in sync with visual/audio metronome")
    print("5. Section names help navigate song structure")
    print("6. Beat indicators prevent timing mistakes")


if __name__ == "__main__":
    demonstrate_api_usage()
    show_workflow()