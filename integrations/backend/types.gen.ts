// This file is auto-generated by @hey-api/openapi-ts

export type BodyCreateNewSongSongsNewPost = {
    /**
     * Guitar Pro file to upload
     */
    file: Blob | File;
};

export type ClientAttachment = {
    name: string;
    contentType: string;
    url: string;
};

export type ClientMessage = {
    role: string;
    content: string;
    experimental_attachments?: Array<ClientAttachment> | null;
    toolInvocations?: Array<ToolInvocation> | null;
};

/**
 * Response model for song creation.
 */
export type CreateSongResponse = {
    success: boolean;
    message: string;
    song_id?: string | null;
    tab_id?: string | null;
    file_reference?: FileReference | null;
};

/**
 * Reference to a file stored in a storage provider.
 */
export type FileReference = {
    /**
     * Storage provider name (e.g., 'local', 's3')
     */
    provider: string;
    /**
     * Provider-specific file reference/path
     */
    reference: string;
};

/**
 * Response model for getting a song by ID.
 */
export type GetSongResponse = {
    success: boolean;
    message: string;
    song_id?: string | null;
    tab_id?: string | null;
    file_reference?: FileReference | null;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Chat request containing conversation messages.
 */
export type Request = {
    messages: Array<ClientMessage>;
};

export type ToolInvocation = {
    state: ToolInvocationState;
    toolCallId: string;
    toolName: string;
    args: unknown;
    result: unknown;
};

export type ToolInvocationState = 'call' | 'partial-call' | 'result';

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type CreateNewSongSongsNewPostData = {
    body: BodyCreateNewSongSongsNewPost;
    path?: never;
    query?: never;
    url: '/songs/new';
};

export type CreateNewSongSongsNewPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateNewSongSongsNewPostError = CreateNewSongSongsNewPostErrors[keyof CreateNewSongSongsNewPostErrors];

export type CreateNewSongSongsNewPostResponses = {
    /**
     * Successful Response
     */
    200: CreateSongResponse;
};

export type CreateNewSongSongsNewPostResponse = CreateNewSongSongsNewPostResponses[keyof CreateNewSongSongsNewPostResponses];

export type GetSongByIdSongsSongIdGetData = {
    body?: never;
    path: {
        song_id: string;
    };
    query?: never;
    url: '/songs/{song_id}';
};

export type GetSongByIdSongsSongIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSongByIdSongsSongIdGetError = GetSongByIdSongsSongIdGetErrors[keyof GetSongByIdSongsSongIdGetErrors];

export type GetSongByIdSongsSongIdGetResponses = {
    /**
     * Successful Response
     */
    200: GetSongResponse;
};

export type GetSongByIdSongsSongIdGetResponse = GetSongByIdSongsSongIdGetResponses[keyof GetSongByIdSongsSongIdGetResponses];

export type HandleChatDataApiChatPostData = {
    body: Request;
    path?: never;
    query?: {
        /**
         * Response protocol format
         */
        protocol?: string;
    };
    url: '/api/chat';
};

export type HandleChatDataApiChatPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HandleChatDataApiChatPostError = HandleChatDataApiChatPostErrors[keyof HandleChatDataApiChatPostErrors];

export type HandleChatDataApiChatPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};